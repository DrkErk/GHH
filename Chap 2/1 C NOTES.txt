Data Types:
		INT: signed integer values: typical sizes by machines (64 bit- 8 bytes, 32 bit- 4 byte, 16 bit- 2 bytes)
		FLOAT: signed floating point (4 bytes)
		DOUBLE: Large floating point number (8 bytes)
		CHAR: single character (1 byte)

Printf Format Types:
		%n :print nothing: printf("test %n")
		%d :Decimal value: printf("test %d", 123)
		%s :String value: printf("test %s", "123")
		%x :Hex value: printf("test %x", 0x123)
		%f :Float value: printf("test %f", 1.308)

scanf - scanf(<format string>, <list of variable/values>);
	ex: scanf("%d", &number);
	(&) means we are storing the value in the memory location pointed by a number. (Pointers section)

strcpy/strncpy
	-strcpy(<destination>, <source>);
	-Doesnt check source size
	-strncpy(<destination>, <source>, <width>);
	-allows for size control and to handle errors

COMPILING the CODE - GNU C COMPILER(gcc)
-compiling is the process of makign human readable code into machine Binary Files.
-These files are nearly ready to execute but may contain unresolved references to symbols and functions not included in the original source code files. These symbols and reference are resolved through a process called LINKING, as each object file are linked together in an executable binary file. 

	GCC commands
	-o <filename>: saved compiled binary with this name. The default is to save output as a.out
	-S           : produces a file containing assembly instructions; saved with an .s extension.
	-ggdb        : makes extra debugging information when using the GNU debugger (gdb)
	-c           : compiles w/o linking/ produces object files with and .o extension
	-mpreferred-stack-boundary=2   : compiles the program using a dword size stack, simplifying the debugging process while you learn
	-fno-stack-protector  : disables stack protection; introduced in GCC 4.1 (helps with buffer overflows)
	-z execstack : enables executable stack. (helps with buffer overflows)


Computer Memory










